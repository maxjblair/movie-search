{"version":3,"sources":["js/partials/Header.js","js/partials/MovieDetails.js","js/partials/MovieCard.js","js/partials/MovieSearch.js","js/partials/Footer.js","js/App.js","reportWebVitals.js","index.js"],"names":["Header","className","MovieDetails","props","movieDetails","moneyFormat","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","numberFormat","genres","map","g","name","join","id","movieId","tagline","format","vote_count","Math","round","runtime","budget","revenue","MovieCard","useState","setMovieDetails","movieProdComps","a","moreInfoBtn","document","getElementById","classList","toggle","moreInfoActive","contains","movieApi","apiRoot","apiKey","fetch","res","json","data","console","error","moreInfoDiv","nextElementSibling","maxHeight","scrollHeight","movies","movie","title","src","poster_path","alt","release_date","DateTimeFormat","year","month","day","Date","vote_average","overview","onClick","fetchMovieDetails","MovieSearch","query","setQuery","setMovies","origMovies","setOrigMovies","sortType","setSortType","sortDirection","setSortDirection","movieCount","setMovieCount","useEffect","length","type","sortProperty","bestMatch","date","rating","direction","sorted","sort","b","nameA","toUpperCase","nameB","sortMovies","onSubmit","e","preventDefault","alert","apiUrl","then","results","filter","m","htmlFor","placeholder","value","onChange","target","val","tmpArr","split","setSortTypes","Footer","href","rel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a33e3a7e.chunk.js","sourcesContent":["export default function Header() {\r\n    return(\r\n        <header className=\"App-header\">\r\n            <h1>Movie Search</h1>\r\n        </header>\r\n    )\r\n}","export default function MovieDetails(props) {\r\n    // const movieProdComps = props.movieProdComps\r\n    // const movieProdImgs = props.movieProdImgs\r\n\r\n    const movieDetails = props.movieDetails ? props.movieDetails[0] : ''\r\n    const moneyFormat = new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0\r\n      });\r\n\r\n    const numberFormat = new Intl.NumberFormat('en-US')\r\n    const genres = movieDetails ? movieDetails['genres'].map(g => g.name).join(', ') : ''\r\n\r\n    return (\r\n        <div id={`${props.movieId}-appended`} className=\"movie-details-appended\">\r\n            <p><strong>{movieDetails.tagline}</strong></p>\r\n            <p><label>Genre(s):</label> {genres}</p>\r\n            <p><label>Rating Votes:</label> {`${numberFormat.format(movieDetails.vote_count)}`}</p>\r\n            <p><label>Runtime:</label> {`${Math.round(movieDetails.runtime/60)} hours, ${movieDetails.runtime%60} minutes`}</p>\r\n            <p><label>Budget:</label> {moneyFormat.format(movieDetails.budget)}</p>\r\n            <p><label>Revenue:</label> {moneyFormat.format(movieDetails.revenue)}</p>\r\n            {/* <p className={movieProdImgs && movieProdImgs.length > 0 ? '' : 'hide' }><label>Production Companies:</label></p>\r\n            <div>\r\n                {movieProdImgs && movieProdImgs.length > 0 ? movieProdImgs.map((img,i) => (\r\n                    <img className='production-images' key={`${props.movieId}-${i}`} src={`https://image.tmdb.org/t/p/w45/${img}`} alt={movieProdComps[i]} />\r\n                )) : ''\r\n                }\r\n            </div> */}\r\n        </div>\r\n    )\r\n}","import {useEffect, useState} from 'react'\r\nimport MovieDetails from './MovieDetails.js'\r\n\r\nexport default function MovieCard(props) {\r\n    const [movieDetails, setMovieDetails] = useState([])\r\n    const [movieProdComps, setMovieProdComps] = useState([])\r\n    const [movieProdImgs, setMovieProdImgs] = useState([])\r\n\r\n    async function fetchMovieDetails(id) {\r\n        let moreInfoBtn = document.getElementById(`${id}-button`)\r\n        moreInfoBtn.classList.toggle('active');\r\n        let moreInfoActive = moreInfoBtn.classList.contains('active')\r\n        let timeoutMS = 0\r\n\r\n        if ( moreInfoActive && !movieDetails[id] ) {\r\n            const movieApi = `${props.apiRoot}/movie/${id}?api_key=${props.apiKey}`\r\n            // timeoutMS = 100\r\n            try {\r\n                const res = await fetch(movieApi);\r\n                const data  = await res.json();\r\n                setMovieDetails({...movieDetails, [id]: [data]})\r\n                // setMovieProdComps({...movieProdComps, [id]: data.production_companies.filter(n => n.logo_path).map(n => n.name)})\r\n                // setMovieProdImgs({...movieProdImgs, [id]: data.production_companies.filter(n => n.logo_path).map(n => n.logo_path)})\r\n            }catch(err){\r\n                console.error(err);\r\n            }\r\n        }\r\n        let moreInfoDiv = moreInfoBtn.nextElementSibling;\r\n        if (moreInfoDiv.style.maxHeight){\r\n            moreInfoDiv.style.maxHeight = null;\r\n        } else {\r\n            moreInfoDiv.style.maxHeight = moreInfoDiv.scrollHeight + \"px\";\r\n        }\r\n\r\n        // setTimeout(() => {  \r\n        //     if (moreInfoDiv.style.maxHeight){\r\n        //         moreInfoDiv.style.maxHeight = null;\r\n        //     } else {\r\n        //         moreInfoDiv.style.maxHeight = moreInfoDiv.scrollHeight + \"px\";\r\n        //     }\r\n        // }, timeoutMS)\r\n    }\r\n\r\n    return (\r\n        <div className=\"movie-tiles\">\r\n            {props.movies.map(movie => (\r\n                <div key={movie.id} className=\"movie-tile\">\r\n                    <div className=\"movie-tile-container\">\r\n                        <h3>{movie.title}</h3>\r\n                        <div className=\"movie-tile-details\">\r\n                            <img \r\n                                src= {`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`} \r\n                                alt={movie.title + ' poster'}\r\n                                className={movie.poster_path ? 'movie-poster' : 'hide'}\r\n                            />\r\n                            <p className=\"font-small\">\r\n                                <label>Release Date: </label> \r\n                                {movie.release_date ? \r\n                                    new Intl.DateTimeFormat('en-us', {\r\n                                    year: 'numeric',\r\n                                    month: 'short',\r\n                                    day: '2-digit'\r\n                                    }).format(new Date(movie.release_date))\r\n                                : movie.release_date\r\n                                }\r\n                            </p>\r\n                            <p className=\"font-small\"><label>Rating:</label> {movie.vote_average}</p>\r\n                            <p className=\"movie-desc\"><label>Description</label><br />{movie.overview}</p>\r\n\r\n                            <button \r\n                                className='movie-tile-details_button' \r\n                                id={`${movie.id}-button`} \r\n                                onClick={() => fetchMovieDetails(movie.id)}\r\n                                >More Info \r\n                                <span className=\"plus\"><i className=\"icon-plus\"></i></span>\r\n                                <span className=\"minus\"><i className=\"icon-minus\"></i></span>\r\n                            </button>\r\n                            <MovieDetails \r\n                                movieId={movie.id} \r\n                                movieDetails={movieDetails[movie.id]}\r\n                                movieProdComps={movieProdComps[movie.id]}\r\n                                // movieProdImgs={movieProdImgs[movie.id]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import {useEffect, useState} from 'react'\r\nimport MovieCard from './MovieCard.js'\r\n\r\nexport default function MovieSearch() {\r\n    const apiRoot = 'https://api.themoviedb.org/3'\r\n    const apiKey = '47117464b881c6659bf21cb0510534bb'\r\n    const [query, setQuery] = useState('Star Trek')\r\n    const [movies, setMovies] = useState([])\r\n    const [origMovies, setOrigMovies] = useState([])\r\n    const [sortType, setSortType] = useState('best-match')\r\n    const [sortDirection, setSortDirection] = useState('')\r\n    const [movieCount, setMovieCount] = useState(0)\r\n\r\n    function searchMovies(e) {\r\n        e.preventDefault()\r\n        if( !query ) {\r\n            alert('Please enter a movie title.')\r\n            return false\r\n        }\r\n        const apiUrl = `${apiRoot}/search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n        fetch(apiUrl)\r\n            .then(res => res.json())\r\n            .then(\r\n                (data) => {\r\n                    setMovies(data.results.filter(m => m.overview.length>0 || m.poster_path))\r\n                    setOrigMovies(data.results.filter(m => m.overview.length>0 || m.poster_path))\r\n                },\r\n                (error) =>{\r\n                    setMovies(error)\r\n                }\r\n            )\r\n    }\r\n\r\n    function setSortTypes(val) {\r\n        const tmpArr = val.split(',')\r\n        setSortDirection(tmpArr[1])\r\n        setSortType(tmpArr[0])\r\n    }\r\n\r\n    useEffect(() => {\r\n        setMovieCount(origMovies.length)\r\n    }, [origMovies])\r\n\r\n    useEffect(() => {\r\n        const sortMovies = type => {\r\n            const types = {\r\n                bestMatch: 'best-match',\r\n                title: 'title',\r\n                date: 'release_date',\r\n                rating: 'vote_average'\r\n            }\r\n            \r\n            const sortProperty = types[type]\r\n            const direction = sortDirection\r\n            let sorted = []\r\n            \r\n            if( sortProperty === 'best-match') {\r\n                sorted = origMovies\r\n            } else if( sortProperty === 'title' ) {\r\n                sorted = [...movies].sort(function(a,b) {\r\n                    let nameA = a.title.toUpperCase();\r\n                    let nameB = b.title.toUpperCase();\r\n                    if ( direction === 'Z') {\r\n                        if(nameA > nameB ) {\r\n                            return -1\r\n                        }\r\n                        if(nameA < nameB) {\r\n                            return 1\r\n                        }\r\n                        return 0\r\n                    } else {\r\n                        if(nameA < nameB ) {\r\n                            return -1\r\n                        }\r\n                        if(nameA > nameB) {\r\n                            return 1\r\n                        }\r\n                        return 0\r\n                    }\r\n                })\r\n            } else if (sortProperty === 'vote_average') {\r\n                if(direction === 'Z') {\r\n                    sorted = [...movies].sort((a,b) => a[sortProperty] - b[sortProperty])\r\n                } else {\r\n                    sorted = [...movies].sort((a,b) => b[sortProperty] - a[sortProperty]) \r\n                }\r\n            } else if ( sortProperty === 'release_date') {\r\n                sorted = [...movies].sort(function(a,b) {\r\n                    if( direction === 'Z' ) {\r\n                        return new Date(b.release_date) - new Date(a.release_date)\r\n                    }\r\n                    return new Date(a.release_date) - new Date(b.release_date)\r\n                })\r\n            }\r\n            setMovies(sorted)\r\n        }\r\n        sortMovies(sortType)\r\n    }, [sortType,sortDirection])\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n            <form className=\"search-form\" onSubmit={searchMovies}>\r\n                <div className=\"searchbox\">\r\n                    <label className=\"search-label\" htmlFor=\"query\">What movie are you looking for?</label>\r\n                    <input\r\n                        className=\"search-input\"\r\n                        type=\"text\"\r\n                        name=\"query\"\r\n                        placeholder=\"e.g., Pulp Fiction\"\r\n                        value={query}\r\n                        onChange={(e) => setQuery(e.target.value)}\r\n                    >\r\n                    </input>\r\n                    <button className=\"search-button\" type=\"submit\">Search</button>\r\n                </div>\r\n            </form>\r\n            <div className=\"search-results\">\r\n                <div className={ query !== '' ? 'search-results-header' : 'hide'}>\r\n                    <div className=\"search-results-header--left\">\r\n                        <h2>\r\n                        {movies[0] ? \r\n                            `Showing ${movieCount} ${movies.length > 1 ? 'Results' : 'Result'}` : \r\n                            `No movies were found for your search: ${query}`\r\n                        }\r\n                        </h2>\r\n                    </div>\r\n                    <div className={`search-results-header--right ${movies.length > 1 ? '' : 'hide'}`}>\r\n                        <label>Sort by: </label>\r\n                        <select onChange={(e) => setSortTypes(e.target.value)}>\r\n                            <option value='bestMatch,A'>Best Match</option>\r\n                            <option value='title,A'>Title A-Z</option>\r\n                            <option value=\"title,Z\">Title Z-A</option>\r\n                            <option value=\"date,A\">Date (Ascending)</option>\r\n                            <option value=\"date,Z\">Date (Decending)</option>\r\n                            <option value=\"rating,A\">Rating (Ascending)</option>\r\n                            <option value=\"rating,Z\">Rating (Decending)</option>\r\n                        </select>\r\n                    </div>\r\n                </div>                \r\n                <MovieCard \r\n                    movies={movies} \r\n                    apiRoot={apiRoot} \r\n                    apiKey={apiKey}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default function Footer() {\r\n    return(\r\n        <footer className=\"App-footer\">\r\n            <div className=\"App-footer-left\">\r\n                <ul>\r\n                    <li>Max Blair</li>\r\n                    <li><a href=\"mailto:maxjblair@gmail.com\">maxjblair@gmail.com</a></li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"App-footer-right\">\r\n                <p>Movie information provided by <a href=\"https://www.themoviedb.org/\" rel=\"noreferrer\" target=\"_blank\" alt=\"The Movie Database (TMDb)\">The Movie Database (TMDb)</a></p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}","import '../css/Main.min.css';\nimport Header from './partials/Header.js'\nimport MovieSearch from './partials/MovieSearch.js'\nimport Footer from './partials/Footer.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieSearch />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './js/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}